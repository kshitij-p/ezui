{"Accordion":{"files":[{"fileName":"Accordion.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixAccordion from \"@radix-ui/react-accordion\";\nimport { ChevronDown } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Accordion = RadixAccordion.Root;\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof RadixAccordion.Item>,\n  React.ComponentPropsWithoutRef<typeof RadixAccordion.Item>\n>(({ className, ...rest }, passedRef) => (\n  <RadixAccordion.Item {...rest} className={cn(\"border-b\", className)} ref={passedRef} />\n));\nAccordionItem.displayName = \"AccordionItem\";\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof RadixAccordion.Trigger>,\n  React.ComponentPropsWithoutRef<typeof RadixAccordion.Trigger>\n>(({ className, children, ...rest }, passedRef) => (\n  <RadixAccordion.Header className=\"flex\">\n    <RadixAccordion.Trigger\n      {...rest}\n      className={cn(\n        \"group flex flex-1 items-center justify-between rounded-sm py-4 font-medium decoration-primary underline-offset-4 transition hover:underline focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring/75 focus-visible:ring-offset-0 focus-visible:ring-offset-background data-[state=open]:text-primary data-[state=open]:underline\",\n        className\n      )}\n      ref={passedRef}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200 group-data-[state=open]:rotate-180 group-data-[state=open]:text-primary\" />\n    </RadixAccordion.Trigger>\n  </RadixAccordion.Header>\n));\nAccordionTrigger.displayName = RadixAccordion.Trigger.displayName;\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof RadixAccordion.Content>,\n  React.ComponentPropsWithoutRef<typeof RadixAccordion.Content>\n>(({ className, children, ...rest }, passedRef) => (\n  <RadixAccordion.Content\n    {...rest}\n    className={cn(\n      \"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordionUp data-[state=open]:animate-accordionDown\",\n      className\n    )}\n    ref={passedRef}\n  >\n    <div className=\"pb-4 pt-0\">{children}</div>\n  </RadixAccordion.Content>\n));\nAccordionContent.displayName = RadixAccordion.Content.displayName;\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n"},{"fileName":"index.ts","fileContent":"import { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from \"./Accordion\";\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n"}]},"AlertDialog":{"files":[{"fileName":"AlertDialog.tsx","fileContent":"\"use client\";\nimport * as React from \"react\";\nimport * as RadixAlertDialog from \"@radix-ui/react-alert-dialog\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  DEFAULT_DIALOG_POSITION,\n  DialogAnimation,\n  DialogPosition,\n  dialogAnimationLookup,\n  dialogPositionLookup,\n} from \"@/components/ui/Dialog/utils\";\n\nconst AlertDialog = RadixAlertDialog.Root;\n\nconst AlertDialogTrigger = RadixAlertDialog.Trigger;\n\nconst AlertDialogPortal = ({ className, children, ...rest }: RadixAlertDialog.DialogPortalProps) => {\n  return (\n    <RadixAlertDialog.Portal {...rest} className={cn(\"fixed inset-0 z-dialog\", className)}>\n      {children}\n    </RadixAlertDialog.Portal>\n  );\n};\nAlertDialogPortal.displayName = RadixAlertDialog.Portal.displayName;\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof RadixAlertDialog.Overlay>,\n  React.ComponentPropsWithoutRef<typeof RadixAlertDialog.Overlay>\n>(({ className, ...rest }, passedRef) => (\n  <RadixAlertDialog.Overlay\n    {...rest}\n    className={cn(\n      \"fixed inset-0 z-dialog-backdrop w-full bg-background/10 backdrop-blur-[8px] transition-all duration-100\",\n      className\n    )}\n    ref={passedRef}\n  />\n));\nAlertDialogOverlay.displayName = RadixAlertDialog.Overlay.displayName;\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof RadixAlertDialog.Content>,\n  React.ComponentPropsWithoutRef<typeof RadixAlertDialog.Content> & {\n    position?: Partial<DialogPosition>;\n    animation?: DialogAnimation;\n  }\n>(\n  (\n    { className, children, position: passedPosition = DEFAULT_DIALOG_POSITION, animation = \"zoom\", ...rest },\n    passedRef\n  ) => {\n    const position = { ...DEFAULT_DIALOG_POSITION, ...passedPosition };\n\n    return (\n      <AlertDialogPortal>\n        <AlertDialogOverlay className=\"group\" />\n\n        <RadixAlertDialog.Content\n          {...rest}\n          className={cn(\n            \"fixed z-dialog flex w-full max-w-[90vw] origin-top-left flex-col gap-4 overflow-y-auto rounded border bg-paper p-6 shadow shadow-black/20 focus-visible:outline-none sm:max-w-lg\",\n            dialogAnimationLookup[animation],\n            dialogPositionLookup.x[position.x],\n            dialogPositionLookup.y[position.y],\n            className\n          )}\n          ref={passedRef}\n        >\n          {children}\n        </RadixAlertDialog.Content>\n      </AlertDialogPortal>\n    );\n  }\n);\nAlertDialogContent.displayName = RadixAlertDialog.Content.displayName;\n\nconst AlertDialogHeader = React.forwardRef(\n  (\n    { children, className, ...rest }: React.HTMLAttributes<HTMLDivElement>,\n    passedRef: React.ForwardedRef<HTMLDivElement>\n  ) => (\n    <div {...rest} className={cn(\"flex flex-col space-y-2 text-center sm:text-left\", className)} ref={passedRef}>\n      {children}\n    </div>\n  )\n);\nAlertDialogHeader.displayName = \"AlertDialogHeader\";\n\nconst AlertDialogFooter = React.forwardRef(\n  (\n    { children, className, ...rest }: React.HTMLAttributes<HTMLDivElement>,\n    passedRef: React.ForwardedRef<HTMLDivElement>\n  ) => (\n    <div\n      {...rest}\n      className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)}\n      ref={passedRef}\n    >\n      {children}\n    </div>\n  )\n);\nAlertDialogFooter.displayName = \"AlertDialogFooter\";\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof RadixAlertDialog.Title>,\n  React.ComponentPropsWithoutRef<typeof RadixAlertDialog.Title>\n>(({ className, ...rest }, passedRef) => (\n  <RadixAlertDialog.Title\n    {...rest}\n    className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\n    ref={passedRef}\n  />\n));\nAlertDialogTitle.displayName = RadixAlertDialog.Title.displayName;\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof RadixAlertDialog.Description>,\n  React.ComponentPropsWithoutRef<typeof RadixAlertDialog.Description>\n>(({ className, ...rest }, passedRef) => (\n  <RadixAlertDialog.Description {...rest} className={cn(\"text-sm\", className)} ref={passedRef} />\n));\nAlertDialogDescription.displayName = RadixAlertDialog.Description.displayName;\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof RadixAlertDialog.Cancel>,\n  React.ComponentPropsWithoutRef<typeof RadixAlertDialog.Cancel>\n>(({ className, ...rest }, passedRef) => (\n  <RadixAlertDialog.Cancel {...rest} className={cn(\"mt-2 sm:mt-0\", className)} ref={passedRef} />\n));\nAlertDialogCancel.displayName = RadixAlertDialog.Cancel.displayName;\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof RadixAlertDialog.Action>,\n  React.ComponentPropsWithoutRef<typeof RadixAlertDialog.Action>\n>(({ className, ...rest }, passedRef) => (\n  <RadixAlertDialog.Action {...rest} className={cn(className)} ref={passedRef} />\n));\nAlertDialogAction.displayName = RadixAlertDialog.Action.displayName;\n\nexport {\n  AlertDialog,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n};\n"},{"fileName":"index.ts","fileContent":"import {\n  AlertDialog,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n} from \"./AlertDialog\";\n\nexport {\n  AlertDialog,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n};\n"}]},"AspectRatio":{"files":[{"fileName":"AspectRatio.tsx","fileContent":"\"use client\"\n\nimport * as RadixAspectRatio from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = RadixAspectRatio.Root\n\nexport { AspectRatio }\n"},{"fileName":"index.ts","fileContent":"import { AspectRatio } from \"./AspectRatio\"\n\nexport { AspectRatio }"}]},"Autocomplete":{"files":[{"fileName":"Autocomplete.tsx","fileContent":"\"use client\";\n\nimport React, { ForwardedRef, useContext, useState } from \"react\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/Popover\";\nimport { ChevronDown } from \"lucide-react\";\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem } from \"@/components/ui/Command\";\n\nimport { selectTriggerClasses } from \"@/components/ui/Select\";\nimport { ScrollAreaRoot, ScrollAreaViewport, ScrollBar } from \"@/components/ui/ScrollArea\";\nimport { cn } from \"@/lib/utils\";\n\ntype AutocompleteOption = Record<string, unknown> | string;\n\ntype AutocompleteContext = {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  value: AutocompleteOption | null;\n  onValueChange: (option: AutocompleteOption) => void;\n  defaultValue?: AutocompleteOption;\n  options: Array<AutocompleteOption> | readonly string[];\n  label: keyof AutocompleteOption | never;\n};\n\nconst AutocompleteContext = React.createContext({} as AutocompleteContext);\n\nconst getValue = <TOption extends AutocompleteOption>(option: TOption, label: keyof TOption) => {\n  if (typeof option === \"string\") return option;\n  return option[label] as string;\n};\n\ntype AutocompleteBaseProps<TOption extends AutocompleteOption> = {\n  options: Array<TOption> | readonly string[];\n  open?: AutocompleteContext[\"open\"];\n  value?: TOption;\n  onValueChange?: (option: TOption) => void;\n  defaultValue?: TOption;\n};\n\ntype AutocompleteProps<TOption extends string | Record<string, unknown>> = AutocompleteBaseProps<TOption> &\n  (TOption extends Record<string, unknown>\n    ? {\n        /**\n         * When values are objects, label tells which property to use as the text value for the trigger.\n         * E.g. {value: \"cat\", label: \"Cats :D\"} and label prop is set to \"label\", the trigger value will show\n         * Cats :D when the particular option is selected\n         */\n        label: keyof TOption;\n      }\n    : {\n        label?: never;\n      });\n\nconst Autocomplete = <TOption extends string | Record<string, unknown>>({\n  children,\n  options,\n  open: passedOpen,\n  onOpenChange,\n  value: passedValue,\n  defaultOpen,\n  onValueChange,\n  defaultValue,\n  label = \"label\",\n  ...rest\n}: React.ComponentPropsWithoutRef<typeof Popover> & AutocompleteProps<TOption>) => {\n  const [_open, _setOpen] = useState(defaultOpen ?? false);\n  const open = passedOpen !== undefined ? passedOpen : _open;\n  const setOpen = onOpenChange !== undefined ? onOpenChange : _setOpen;\n  const [_value, _setValue] = React.useState<TOption | null>(defaultValue ?? null);\n  const value = passedValue !== undefined ? passedValue : _value;\n  const setValue = onValueChange !== undefined ? onValueChange : _setValue;\n\n  return (\n    <AutocompleteContext.Provider\n      value={{\n        defaultValue,\n        open,\n        onOpenChange: setOpen,\n        onValueChange: setValue as (option: AutocompleteOption) => void,\n        value,\n        options,\n        label: label as keyof AutocompleteOption | never,\n      }}\n    >\n      <Popover {...rest} open={open} onOpenChange={setOpen}>\n        {children}\n      </Popover>\n    </AutocompleteContext.Provider>\n  );\n};\n\nconst AutocompleteTrigger = React.forwardRef<\n  React.ElementRef<typeof PopoverTrigger>,\n  React.ComponentPropsWithoutRef<typeof PopoverTrigger>\n>(({ children, className, asChild, onClick, disabled, ...rest }, passedRef) => {\n  return (\n    <PopoverTrigger\n      {...rest}\n      className={!asChild ? cn(selectTriggerClasses, className) : undefined}\n      data-disabled={disabled ? true : undefined}\n      disabled={disabled}\n      asChild={asChild}\n      ref={passedRef}\n    >\n      {children}\n    </PopoverTrigger>\n  );\n});\nAutocompleteTrigger.displayName = \"AutocompleteTrigger\";\n\nconst AutocompleteValue = React.forwardRef(\n  (\n    {\n      className,\n      placeholder = \"Select a value\",\n      ...rest\n    }: Omit<React.ComponentPropsWithoutRef<\"span\">, \"children\"> & {\n      placeholder?: string;\n    },\n    passedRef: ForwardedRef<HTMLSpanElement>\n  ) => {\n    const { value, label } = useContext(AutocompleteContext);\n\n    return (\n      <span {...rest} className={cn(\"flex items-center justify-center gap-2\", className)} ref={passedRef}>\n        {value ? getValue(value, label) : placeholder}\n        <ChevronDown className=\"ml-auto h-4 w-4 rotate-0 opacity-50 transition group-data-[state='open']:rotate-180\" />\n      </span>\n    );\n  }\n);\nAutocompleteValue.displayName = \"AutocompleteValue\";\n\nconst AutocompleteInput = CommandInput;\n\nconst AutocompleteContent = React.forwardRef<\n  React.ElementRef<typeof PopoverContent>,\n  React.ComponentPropsWithoutRef<typeof PopoverContent> & {\n    input?: React.ReactNode;\n  }\n>(({ children, className, input = <AutocompleteInput />, sideOffset = 8, ...rest }, passedRef) => {\n  return (\n    //PopoverContent also uses the cn util so no need to use it again here\n    <PopoverContent {...rest} sideOffset={sideOffset} className={`w-[200px] p-0 ${className}`} ref={passedRef}>\n      <Command className=\"p-2 shadow-none\">\n        {input}\n        <CommandEmpty>No framework found.</CommandEmpty>\n        <ScrollAreaRoot>\n          <CommandGroup className=\"py-2\">\n            <ScrollAreaViewport className=\"max-h-56\">{children}</ScrollAreaViewport>\n          </CommandGroup>\n          <ScrollBar />\n        </ScrollAreaRoot>\n      </Command>\n    </PopoverContent>\n  );\n});\nAutocompleteContent.displayName = \"AutocompleteContent\";\n\nconst AutocompleteItem = React.forwardRef<\n  React.ElementRef<typeof CommandItem>,\n  Omit<React.ComponentPropsWithoutRef<typeof CommandItem>, \"value\"> & {\n    value: AutocompleteOption;\n  }\n>(({ children, className, value, ...rest }, passedRef) => {\n  const { onValueChange, onOpenChange } = useContext(AutocompleteContext);\n\n  return (\n    <CommandItem\n      {...rest}\n      className={className}\n      onSelect={() => {\n        onValueChange(value);\n        onOpenChange(false);\n      }}\n      ref={passedRef}\n    >\n      {children}\n    </CommandItem>\n  );\n});\nAutocompleteItem.displayName = \"AutocompleteItem\";\n\nexport {\n  Autocomplete,\n  AutocompleteTrigger,\n  AutocompleteValue,\n  AutocompleteInput,\n  AutocompleteContent,\n  AutocompleteItem,\n  AutocompleteContext,\n};\n"},{"fileName":"index.ts","fileContent":"import {\n  Autocomplete,\n  AutocompleteTrigger,\n  AutocompleteValue,\n  AutocompleteInput,\n  AutocompleteContent,\n  AutocompleteItem,\n  AutocompleteContext,\n} from \"./Autocomplete\";\n\nexport {\n  Autocomplete,\n  AutocompleteTrigger,\n  AutocompleteValue,\n  AutocompleteInput,\n  AutocompleteContent,\n  AutocompleteItem,\n  AutocompleteContext,\n};\n"}]},"Avatar":{"files":[{"fileName":"Avatar.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixAvatar from \"@radix-ui/react-avatar\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof RadixAvatar.Root>,\n  React.ComponentPropsWithoutRef<typeof RadixAvatar.Root>\n>(({ className, ...rest }, passedRef) => (\n  <RadixAvatar.Root\n    {...rest}\n    className={cn(\"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\", className)}\n    ref={passedRef}\n  />\n));\nAvatar.displayName = RadixAvatar.Root.displayName;\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof RadixAvatar.Image>,\n  React.ComponentPropsWithoutRef<typeof RadixAvatar.Image>\n>(({ className, ...rest }, passedRef) => (\n  <RadixAvatar.Image {...rest} className={cn(\"aspect-square h-full w-full\", className)} ref={passedRef} />\n));\nAvatarImage.displayName = RadixAvatar.Image.displayName;\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof RadixAvatar.Fallback>,\n  React.ComponentPropsWithoutRef<typeof RadixAvatar.Fallback>\n>(({ className, ...rest }, passedRef) => (\n  <RadixAvatar.Fallback\n    {...rest}\n    className={cn(\"flex h-full w-full items-center justify-center rounded-full bg-muted\", className)}\n    ref={passedRef}\n  />\n));\nAvatarFallback.displayName = RadixAvatar.Fallback.displayName;\n\nexport { Avatar, AvatarImage, AvatarFallback };\n"},{"fileName":"index.ts","fileContent":"import { Avatar, AvatarImage, AvatarFallback } from \"./Avatar\";\n\nexport { Avatar, AvatarImage, AvatarFallback };\n"}]},"Badge":{"files":[{"fileName":"Badge.tsx","fileContent":"import * as React from \"react\";\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ALL_BADGE_VARIANTS = {\n  type: {\n    primary: \"bg-primary text-black hover:bg-primary/80 focus-visible:bg-primary/80\",\n    secondary:\n      \"bg-background border border-border hover:bg-accent/50 dark:hover:bg-accent dark:focus-visible:bg-accent  focus-visible:bg-accent/50\",\n    danger: \"bg-danger text-black hover:bg-danger/80 focus-visible:bg-danger/80 focus-visible:ring-danger/75\",\n    \"danger-secondary\":\n      \"bg-background border border-danger hover:bg-danger/50 focus-visible:bg-danger/50 focus-visible:ring-danger/75\",\n    outline: \"bg-background border hover:bg-background/80 focus-visible:bg-background/80\",\n  },\n} as const;\n\ntype BadgeVariants = {\n  [k in keyof typeof ALL_BADGE_VARIANTS]: keyof (typeof ALL_BADGE_VARIANTS)[k];\n};\n\nconst DEFAULT_VARIANTS = {\n  type: \"primary\",\n} satisfies BadgeVariants;\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold transition-colors focus-visible:outline-0 focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-background focus-visible:ring-offset-2\",\n  {\n    variants: ALL_BADGE_VARIANTS,\n    defaultVariants: DEFAULT_VARIANTS,\n  }\n);\n\ninterface BadgeProps extends React.HTMLAttributes<HTMLDivElement> {\n  variants?: Partial<BadgeVariants>;\n}\n\nconst Badge = React.forwardRef(\n  ({ className, variants = DEFAULT_VARIANTS, ...rest }: BadgeProps, passedRef: React.ForwardedRef<HTMLDivElement>) => {\n    return <div {...rest} className={cn(badgeVariants(variants), className)} ref={passedRef} />;\n  }\n);\nBadge.displayName = \"Badge\";\n\nexport { Badge, badgeVariants, ALL_BADGE_VARIANTS, DEFAULT_VARIANTS, type BadgeVariants, type BadgeProps };\n"},{"fileName":"index.ts","fileContent":"import {\n  Badge,\n  badgeVariants,\n  ALL_BADGE_VARIANTS,\n  DEFAULT_VARIANTS,\n  type BadgeVariants,\n  type BadgeProps,\n} from \"./Badge\";\n\nexport { Badge, badgeVariants, ALL_BADGE_VARIANTS, DEFAULT_VARIANTS, type BadgeVariants, type BadgeProps };\n"}]},"Button":{"files":[{"fileName":"Button.tsx","fileContent":"import { cn } from \"@/lib/utils\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva } from \"class-variance-authority\";\nimport React, { ForwardedRef } from \"react\";\n\nconst ALL_BUTTON_VARIANTS = {\n  size: {\n    xs: \"h-7 text-xs px-3 border rounded focus-visible:ring-offset-2\",\n    sm: \"h-8 text-sm px-4 border rounded focus-visible:ring-offset-2\",\n    md: \"h-10 text-base px-6 border-2 rounded focus-visible:ring-offset-2\",\n    lg: \"h-11 text-lg px-6 border-2 rounded focus-visible:ring-offset-2\",\n    xl: \"h-14 text-xl px-7 border-2 rounded focus-visible:ring-offset-2\",\n  },\n  type: {\n    primary: \"bg-primary font-medium text-black border-none hover:bg-primary/80 focus-visible:bg-primary/80\",\n    secondary:\n      \"bg-background border-border hover:bg-accent/50 dark:hover:bg-accent dark:focus-visible:bg-accent  focus-visible:bg-accent/50\",\n    danger:\n      \"bg-danger font-medium text-black border-none hover:bg-danger/80 focus-visible:bg-danger/80 focus-visible:ring-danger/75\",\n    \"danger-secondary\":\n      \"bg-background border-danger hover:bg-danger/50 focus-visible:bg-danger/50 focus-visible:ring-danger/75\",\n    ghost:\n      \"bg-transparent border-none hover:bg-accent/50 dark:hover:bg-accent dark:focus-visible:bg-accent  focus-visible:bg-accent/50\",\n  },\n} as const;\n\ntype ButtonVariants = {\n  [k in keyof typeof ALL_BUTTON_VARIANTS]: keyof (typeof ALL_BUTTON_VARIANTS)[k];\n};\n\nconst DEFAULT_VARIANTS = {\n  size: \"md\",\n  type: \"primary\",\n} satisfies ButtonVariants;\n\nconst buttonVariants = cva(\n  \"bg-transparent inline-flex items-center justify-center transition focus-visible:outline-0 focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-background disabled:opacity-50\",\n  {\n    variants: ALL_BUTTON_VARIANTS,\n    defaultVariants: DEFAULT_VARIANTS,\n  }\n);\n\nconst Button = React.forwardRef(\n  (\n    {\n      children,\n      className,\n      variants = DEFAULT_VARIANTS,\n      asChild = false,\n      ...rest\n    }: React.ComponentProps<\"button\"> & {\n      variants?: Partial<ButtonVariants>;\n      /**\n       * If true, the immediate child of the button is rendered instead of the button but with the styling\n       * of the button. Useful for rendering Links as button.\n       *\n       * \\<Button asChild>\\<Link>A link\\</Link>\\</Button>\n       */\n      asChild?: boolean;\n    },\n    passedRef: ForwardedRef<HTMLButtonElement>\n  ) => {\n    const Element = asChild ? Slot : \"button\";\n\n    return (\n      <Element {...rest} className={cn(buttonVariants(variants), className)} ref={passedRef}>\n        {children}\n      </Element>\n    );\n  }\n);\n\nexport { Button, buttonVariants, ALL_BUTTON_VARIANTS, DEFAULT_VARIANTS, type ButtonVariants };\n"},{"fileName":"index.ts","fileContent":"import { Button, buttonVariants, ALL_BUTTON_VARIANTS, DEFAULT_VARIANTS, type ButtonVariants } from \"./Button\";\n\nexport { Button, buttonVariants, ALL_BUTTON_VARIANTS, DEFAULT_VARIANTS, type ButtonVariants };\n"}]},"Card":{"files":[{"fileName":"Card.tsx","fileContent":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...rest }, passedRef) => (\n    <div {...rest} className={cn(\"rounded-lg border bg-card shadow-sm\", className)} ref={passedRef} />\n  )\n);\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...rest }, passedRef) => (\n    <div {...rest} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} ref={passedRef} />\n  )\n);\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(\n  ({ className, ...rest }, passedRef) => (\n    <h3 {...rest} className={cn(\"text-2xl font-semibold leading-none\", className)} ref={passedRef} />\n  )\n);\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(\n  ({ className, ...rest }, passedRef) => (\n    <p {...rest} className={cn(\"text-sm text-light-text\", className)} ref={passedRef} />\n  )\n);\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...rest }, passedRef) => <div {...rest} className={cn(\"p-6 pt-0\", className)} ref={passedRef} />\n);\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...rest }, passedRef) => (\n    <div {...rest} className={cn(\" flex items-center p-6 pt-0\", className)} ref={passedRef} />\n  )\n);\nCardFooter.displayName = \"CardFooter\";\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };\n"},{"fileName":"index.ts","fileContent":"import { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent } from \"./Card\";\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };\n"}]},"Checkbox":{"files":[{"fileName":"Checkbox.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixCheckbox from \"@radix-ui/react-checkbox\";\nimport { Check, Minus } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof RadixCheckbox.Root>,\n  React.ComponentPropsWithoutRef<typeof RadixCheckbox.Root>\n>(({ className, ...rest }, passedRef) => (\n  <RadixCheckbox.Root\n    {...rest}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background transition focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 aria-[invalid=true]:border-invalid aria-[invalid=true]:ring-invalid/75 data-[state=checked]:bg-primary data-[state=indeterminate]:bg-accent/50 enabled:data-[state=unchecked]:hover:bg-accent/50 enabled:data-[state=unchecked]:focus-visible:bg-accent/50 aria-[invalid=true]:data-[state=checked]:bg-invalid\",\n      className\n    )}\n    ref={passedRef}\n  >\n    <RadixCheckbox.Indicator className={cn(\"group flex items-center justify-center text-white\")}>\n      <Check className=\"h-full w-full group-data-[state=indeterminate]:hidden\" />\n      <Minus className=\"h-full w-full group-data-[state=checked]:hidden\" />\n    </RadixCheckbox.Indicator>\n  </RadixCheckbox.Root>\n));\nCheckbox.displayName = RadixCheckbox.Root.displayName;\n\nexport { Checkbox };\n"},{"fileName":"index.ts","fileContent":"import { Checkbox } from \"./Checkbox\";\n\nexport { Checkbox };\n"}]},"Code":{"files":[{"fileName":"Code.tsx","fileContent":"import { cn } from \"@/lib/utils\";\nimport React, { ForwardedRef } from \"react\";\n\nconst Code = React.forwardRef(\n  (\n    {\n      children,\n      className,\n      block = false,\n      ...rest\n    }: React.HTMLAttributes<HTMLElement> & {\n      block?: boolean;\n    },\n    passedRef: ForwardedRef<HTMLElement>\n  ) => {\n    const Parent = block ? \"pre\" : React.Fragment;\n\n    return (\n      <Parent>\n        <code\n          {...rest}\n          className={cn(\"relative rounded border border-border-light bg-muted px-1.5 py-1\", className)}\n          ref={passedRef}\n        >\n          {children}\n        </code>\n      </Parent>\n    );\n  }\n);\nCode.displayName = \"Code\";\n\nexport { Code };\n"},{"fileName":"index.ts","fileContent":"import { Code } from \"./Code\";\n\nexport { Code };\n"}]},"Collapsible":{"files":[{"fileName":"Collapsible.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixCollapsible from \"@radix-ui/react-collapsible\";\nimport { cn } from \"@/lib/utils\";\n\nconst Collapsible = RadixCollapsible.Root;\n\nconst CollapsibleTrigger = RadixCollapsible.CollapsibleTrigger;\n\nconst CollapsibleContent = React.forwardRef<\n  React.ElementRef<typeof RadixCollapsible.CollapsibleContent>,\n  React.ComponentPropsWithoutRef<typeof RadixCollapsible.CollapsibleContent>\n>(({ children, className, ...rest }, passedRef) => {\n  return (\n    <RadixCollapsible.CollapsibleContent\n      {...rest}\n      className={cn(\n        \"overflow-hidden data-[state=closed]:animate-collapsibleUp data-[state=open]:animate-collapsibleDown\",\n        className\n      )}\n      ref={passedRef}\n    >\n      {children}\n    </RadixCollapsible.CollapsibleContent>\n  );\n});\nCollapsibleContent.displayName = RadixCollapsible.CollapsibleContent.displayName;\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent };\n"},{"fileName":"index.ts","fileContent":"import { Collapsible, CollapsibleTrigger, CollapsibleContent } from \"./Collapsible\";\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent };\n"}]},"Command":{"files":[{"fileName":"Command.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\n\nimport { Command as CommandPrimitive } from \"cmdk\";\nimport { Dialog, DialogContent } from \"@/components/ui/Dialog\";\nimport { ScrollArea } from \"@/components/ui/ScrollArea\";\nimport { cn } from \"@/lib/utils\";\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...rest }, passedRef) => (\n  <CommandPrimitive\n    {...rest}\n    className={cn(\"flex h-full w-full flex-col overflow-hidden rounded-md border bg-paper shadow-md\", className)}\n    ref={passedRef}\n  />\n));\nCommand.displayName = CommandPrimitive.displayName;\n\ntype CommandDialogProps = React.ComponentPropsWithoutRef<typeof Dialog>;\n\nconst CommandDialog = ({ children, ...rest }: CommandDialogProps) => {\n  return (\n    <Dialog {...rest}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-2xl\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-light-text [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ children, className, ...rest }, passedRef) => (\n  <div className=\"flex items-center border-b border-separator px-3\" cmdk-input-wrapper=\"\">\n    {children}\n    <CommandPrimitive.Input\n      {...rest}\n      ref={passedRef}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-base outline-none placeholder:text-light-text disabled:opacity-50\",\n        className\n      )}\n    />\n  </div>\n));\n\nCommandInput.displayName = CommandPrimitive.Input.displayName;\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ children, className, ...rest }, passedRef) => {\n  return (\n    <CommandPrimitive.List\n      {...rest}\n      className={cn(\"overflow-x-hidden p-1 [&_[cmdk-list-sizer]]:h-[300px]\", className)}\n      ref={passedRef}\n    >\n      <ScrollArea type=\"always\">{children}</ScrollArea>\n    </CommandPrimitive.List>\n  );\n});\n\nCommandList.displayName = CommandPrimitive.List.displayName;\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>(({ className, ...rest }, passedRef) => (\n  <CommandPrimitive.Empty {...rest} className={cn(\"py-6 text-center text-sm\", className)} ref={passedRef} />\n));\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName;\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...rest }, passedRef) => (\n  <CommandPrimitive.Group\n    {...rest}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-text\",\n      className\n    )}\n    ref={passedRef}\n  />\n));\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName;\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...rest }, passedRef) => (\n  <CommandPrimitive.Separator {...rest} className={cn(\"-mx-1 my-1 h-px bg-separator\", className)} ref={passedRef} />\n));\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName;\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, disabled, ...rest }, passedRef) => (\n  <CommandPrimitive.Item\n    {...rest}\n    disabled={disabled}\n    data-disabled={disabled === true ? true : undefined}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded border border-transparent px-2 py-1.5 text-base outline-none aria-selected:border-border aria-selected:bg-accent/50 data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    ref={passedRef}\n  />\n));\n\nCommandItem.displayName = CommandPrimitive.Item.displayName;\n\nconst CommandShortcut = ({ className, ...rest }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return <span {...rest} className={cn(\"ml-auto text-xs tracking-widest text-light-text\", className)} />;\n};\nCommandShortcut.displayName = \"CommandShortcut\";\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n};\n"},{"fileName":"index.ts","fileContent":"import {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n} from \"./Command\";\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n};\n"}]},"Dialog":{"files":[{"fileName":"Dialog.tsx","fileContent":"\"use client\";\nimport * as React from \"react\";\nimport * as RadixDialog from \"@radix-ui/react-dialog\";\n\nimport { cn } from \"@/lib/utils\";\nimport {\n  DEFAULT_DIALOG_POSITION,\n  DialogAnimation,\n  DialogPosition,\n  dialogAnimationLookup,\n  dialogPositionLookup,\n} from \"@/components/ui/Dialog/utils\";\n\nconst Dialog = RadixDialog.Root;\n\nconst DialogTrigger = RadixDialog.Trigger;\n\nconst DialogClose = RadixDialog.Close;\n\nconst DialogPortal = ({ className, children, ...rest }: RadixDialog.DialogPortalProps) => {\n  return (\n    <RadixDialog.Portal {...rest} className={cn(\"fixed inset-0 z-dialog\", className)}>\n      {children}\n    </RadixDialog.Portal>\n  );\n};\nDialogPortal.displayName = RadixDialog.Portal.displayName;\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof RadixDialog.Overlay>,\n  React.ComponentPropsWithoutRef<typeof RadixDialog.Overlay>\n>(({ className, ...rest }, passedRef) => (\n  <RadixDialog.Overlay\n    {...rest}\n    className={cn(\n      \"fixed inset-0 z-dialog-backdrop w-full bg-background/10 backdrop-blur-[8px] transition-all duration-100\",\n      className\n    )}\n    ref={passedRef}\n  />\n));\nDialogOverlay.displayName = RadixDialog.Overlay.displayName;\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof RadixDialog.Content>,\n  React.ComponentPropsWithoutRef<typeof RadixDialog.Content> & {\n    position?: Partial<DialogPosition>;\n    animation?: DialogAnimation;\n  }\n>(\n  (\n    { className, children, position: passedPosition = DEFAULT_DIALOG_POSITION, animation = \"zoom\", ...rest },\n    passedRef\n  ) => {\n    const position = { ...DEFAULT_DIALOG_POSITION, ...passedPosition };\n\n    return (\n      <DialogPortal>\n        <DialogOverlay className=\"group\" />\n\n        <RadixDialog.Content\n          {...rest}\n          className={cn(\n            \"fixed z-dialog flex w-full max-w-[90vw] origin-top-left flex-col gap-4 overflow-y-auto rounded border bg-paper p-6 shadow shadow-black/20 focus-visible:outline-none sm:max-w-lg\",\n            dialogAnimationLookup[animation],\n            dialogPositionLookup.x[position.x],\n            dialogPositionLookup.y[position.y],\n            className\n          )}\n          ref={passedRef}\n        >\n          {children}\n        </RadixDialog.Content>\n      </DialogPortal>\n    );\n  }\n);\nDialogContent.displayName = RadixDialog.Content.displayName;\n\nconst DialogHeader = React.forwardRef(\n  (\n    { children, className, ...rest }: React.HTMLAttributes<HTMLDivElement>,\n    passedRef: React.ForwardedRef<HTMLDivElement>\n  ) => (\n    <div {...rest} className={cn(\"flex flex-col space-y-2 text-center sm:text-left\", className)} ref={passedRef}>\n      {children}\n    </div>\n  )\n);\nDialogHeader.displayName = \"DialogHeader\";\n\nconst DialogFooter = React.forwardRef(\n  (\n    { children, className, ...rest }: React.HTMLAttributes<HTMLDivElement>,\n    passedRef: React.ForwardedRef<HTMLDivElement>\n  ) => (\n    <div\n      {...rest}\n      className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)}\n      ref={passedRef}\n    >\n      {children}\n    </div>\n  )\n);\nDialogFooter.displayName = \"DialogFooter\";\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof RadixDialog.Title>,\n  React.ComponentPropsWithoutRef<typeof RadixDialog.Title>\n>(({ className, ...rest }, passedRef) => (\n  <RadixDialog.Title\n    {...rest}\n    className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\n    ref={passedRef}\n  />\n));\nDialogTitle.displayName = RadixDialog.Title.displayName;\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof RadixDialog.Description>,\n  React.ComponentPropsWithoutRef<typeof RadixDialog.Description>\n>(({ className, ...rest }, passedRef) => (\n  <RadixDialog.Description {...rest} className={cn(\"text-sm\", className)} ref={passedRef} />\n));\nDialogDescription.displayName = RadixDialog.Description.displayName;\n\nexport {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n};\n"},{"fileName":"index.ts","fileContent":"import {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n} from \"./Dialog\";\n\nexport {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n};\n"},{"fileName":"utils.ts","fileContent":"//Shared util vars among Dialog, AlertDialog and Sheet components\n\n//Extend this to extend available positions for Dialog, AlertDialog, Sheet, etc\nexport const DEFAULT_DIALOG_POSITION = { x: \"center\", y: \"center\" } as {\n  x: \"left\" | \"center\" | \"right\";\n  y: \"top\" | \"center\" | \"bottom\";\n};\n\nexport type DialogPosition = typeof DEFAULT_DIALOG_POSITION;\n\nexport const dialogPositionLookup: {\n  x: {\n    [k in DialogPosition[\"x\"]]: string;\n  };\n  y: {\n    [k in DialogPosition[\"y\"]]: string;\n  };\n} = {\n  x: {\n    left: \"left-0\",\n    center: \"left-1/2 -translate-x-1/2\",\n    right: \"right-0\",\n  },\n  y: {\n    top: \"top-0\",\n    center: \"top-1/2 -translate-y-1/2\",\n    bottom: \"bottom-0\",\n  },\n};\n\n//Extend this to extend available animations for Dialog, AlertDialog, Sheet, etc\nexport const dialogAnimationLookup = {\n  zoom: \"animate-zoomIn data-[state='closed']:animate-zoomOut\",\n  slideLeft: \"animate-slideInLeft data-[state='closed']:animate-slideOutLeft\",\n  slideRight: \"animate-slideInRight data-[state='closed']:animate-slideOutRight\",\n  slideTop: \"animate-slideInTop data-[state='closed']:animate-slideOutTop\",\n  slideBottom: \"animate-slideInBottom data-[state='closed']:animate-slideOutBottom\",\n  none: \"\",\n} as const;\n\nexport type DialogAnimation = keyof typeof dialogAnimationLookup;\n"}]},"DropdownMenu":{"files":[{"fileName":"DropdownMenu.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixDropdownMenu from \"@radix-ui/react-dropdown-menu\";\nimport { Check, ChevronRight, Circle } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst DropdownMenu = RadixDropdownMenu.Root;\n\nconst DropdownMenuTrigger = RadixDropdownMenu.Trigger;\n\nconst DropdownMenuGroup = RadixDropdownMenu.Group;\n\nconst DropdownMenuPortal = RadixDropdownMenu.Portal;\n\nconst DropdownMenuSub = RadixDropdownMenu.Sub;\n\nconst DropdownMenuRadioGroup = RadixDropdownMenu.RadioGroup;\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof RadixDropdownMenu.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof RadixDropdownMenu.SubTrigger> & {\n    inset?: boolean;\n  }\n>(({ className, inset, children, ...rest }, passedRef) => (\n  <RadixDropdownMenu.SubTrigger\n    {...rest}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm border border-transparent px-2 py-1.5 text-sm outline-none focus:border-border focus:bg-accent/50 data-[state=open]:border-border data-[state=open]:bg-accent/75\",\n      inset && \"pl-8\",\n      className\n    )}\n    ref={passedRef}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </RadixDropdownMenu.SubTrigger>\n));\nDropdownMenuSubTrigger.displayName = RadixDropdownMenu.SubTrigger.displayName;\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof RadixDropdownMenu.SubContent>,\n  React.ComponentPropsWithoutRef<typeof RadixDropdownMenu.SubContent>\n>(({ className, ...rest }, passedRef) => (\n  <RadixDropdownMenu.SubContent\n    {...rest}\n    className={cn(\n      \"z-50 min-w-[8rem] animate-zoomIn overflow-hidden rounded-md border bg-paper p-2 data-[state=closed]:animate-zoomOut data-[state=open]:data-[side=bottom]:animate-slideInTop/5 data-[state=open]:data-[side=left]:animate-slideInRight/5 data-[state=open]:data-[side=right]:animate-slideInLeft/5 data-[state=open]:data-[side=top]:animate-slideInBottom/5\",\n      \"shadow-lg\",\n      className\n    )}\n    ref={passedRef}\n  />\n));\nDropdownMenuSubContent.displayName = RadixDropdownMenu.SubContent.displayName;\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof RadixDropdownMenu.Content>,\n  React.ComponentPropsWithoutRef<typeof RadixDropdownMenu.Content>\n>(({ className, sideOffset = 8, ...rest }, passedRef) => (\n  <RadixDropdownMenu.Portal>\n    <RadixDropdownMenu.Content\n      {...rest}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] animate-zoomIn overflow-hidden rounded-md border bg-paper p-2 data-[state=closed]:animate-zoomOut data-[state=open]:data-[side=bottom]:animate-slideInTop/5 data-[state=open]:data-[side=left]:animate-slideInRight/5 data-[state=open]:data-[side=right]:animate-slideInLeft/5 data-[state=open]:data-[side=top]:animate-slideInBottom/5\",\n        \"shadow-md\",\n        className\n      )}\n      ref={passedRef}\n    />\n  </RadixDropdownMenu.Portal>\n));\nDropdownMenuContent.displayName = RadixDropdownMenu.Content.displayName;\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof RadixDropdownMenu.Item>,\n  React.ComponentPropsWithoutRef<typeof RadixDropdownMenu.Item> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...rest }, passedRef) => (\n  <RadixDropdownMenu.Item\n    {...rest}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm border border-transparent px-2 py-1.5 text-sm outline-none transition-colors focus:border-border focus:bg-accent/50 data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    ref={passedRef}\n  />\n));\nDropdownMenuItem.displayName = RadixDropdownMenu.Item.displayName;\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof RadixDropdownMenu.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof RadixDropdownMenu.CheckboxItem>\n>(({ className, children, checked, ...rest }, passedRef) => (\n  <RadixDropdownMenu.CheckboxItem\n    {...rest}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm border border-transparent py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:border-border focus:bg-accent/50 data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    ref={passedRef}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <RadixDropdownMenu.ItemIndicator>\n        <Check className=\"h-4 w-4 text-primary\" />\n      </RadixDropdownMenu.ItemIndicator>\n    </span>\n    {children}\n  </RadixDropdownMenu.CheckboxItem>\n));\nDropdownMenuCheckboxItem.displayName = RadixDropdownMenu.CheckboxItem.displayName;\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof RadixDropdownMenu.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof RadixDropdownMenu.RadioItem>\n>(({ className, children, ...rest }, passedRef) => (\n  <RadixDropdownMenu.RadioItem\n    {...rest}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm border border-transparent py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:border-border focus:bg-accent/50 data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    ref={passedRef}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <RadixDropdownMenu.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-primary text-primary\" />\n      </RadixDropdownMenu.ItemIndicator>\n    </span>\n    {children}\n  </RadixDropdownMenu.RadioItem>\n));\nDropdownMenuRadioItem.displayName = RadixDropdownMenu.RadioItem.displayName;\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof RadixDropdownMenu.Label>,\n  React.ComponentPropsWithoutRef<typeof RadixDropdownMenu.Label> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...rest }, passedRef) => (\n  <RadixDropdownMenu.Label\n    {...rest}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", inset && \"pl-8\", className)}\n    ref={passedRef}\n  />\n));\nDropdownMenuLabel.displayName = RadixDropdownMenu.Label.displayName;\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof RadixDropdownMenu.Separator>,\n  React.ComponentPropsWithoutRef<typeof RadixDropdownMenu.Separator>\n>(({ className, ...rest }, passedRef) => (\n  <RadixDropdownMenu.Separator {...rest} className={cn(\"-mx-1 my-1 h-px bg-separator\", className)} ref={passedRef} />\n));\nDropdownMenuSeparator.displayName = RadixDropdownMenu.Separator.displayName;\n\nconst DropdownMenuShortcut = ({ className, ...rest }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return <span {...rest} className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)} />;\n};\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\";\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n};\n"},{"fileName":"index.ts","fileContent":"import {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n} from \"./DropdownMenu\";\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n};\n"}]},"Form":{"files":[{"fileName":"Form.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixLabel from \"@radix-ui/react-label\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport {\n  type FieldValues,\n  FormProvider,\n  type SubmitHandler,\n  type UseFormReturn,\n  Controller,\n  FieldPath,\n  ControllerProps,\n  useFormContext as useRHFFormContext,\n  useForm as useRHFForm,\n  UseFormProps,\n} from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Label } from \"@/components/ui/Label\";\nimport { cn } from \"@/lib/utils\";\nimport { type TypeOf } from \"zod\";\n\ntype FormFieldContext<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName;\n};\n\nconst FormFieldContext = React.createContext({} as FormFieldContext);\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>(\n  props: ControllerProps<TFieldValues, TName>\n) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n};\n\ntype FormItemContext = {\n  id: string;\n};\n\nconst FormItemContext = React.createContext({} as FormItemContext);\n\nconst FormItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...rest }, passedRef) => {\n    const id = React.useId();\n\n    return (\n      <FormItemContext.Provider value={{ id }}>\n        <div className={cn(\"space-y-2\", className)} {...rest} ref={passedRef} />\n      </FormItemContext.Provider>\n    );\n  }\n);\nFormItem.displayName = \"FormItem\";\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext);\n  const itemContext = React.useContext(FormItemContext);\n  const { getFieldState, formState } = useRHFFormContext();\n\n  const fieldState = getFieldState(fieldContext.name, formState);\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\");\n  }\n\n  const { id } = itemContext;\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  };\n};\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof RadixLabel.Root>,\n  React.ComponentPropsWithoutRef<typeof RadixLabel.Root>\n>(({ className, ...rest }, passedRef) => {\n  const { error, formItemId } = useFormField();\n\n  return <Label className={cn(error && \"text-invalid\", className)} htmlFor={formItemId} {...rest} ref={passedRef} />;\n});\nFormLabel.displayName = \"FormLabel\";\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot> & {\n    disabled?: boolean;\n  }\n>((props, passedRef) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField();\n\n  const { disabled: formDisabled } = React.useContext(FormContext);\n\n  const disabled = props.disabled || formDisabled;\n\n  return (\n    <Slot\n      id={formItemId}\n      aria-describedby={!error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`}\n      aria-invalid={!!error}\n      disabled={disabled}\n      {...props}\n      ref={passedRef}\n    />\n  );\n});\nFormControl.displayName = \"FormControl\";\n\nconst FormDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(\n  ({ className, ...rest }, passedRef) => {\n    const { formDescriptionId } = useFormField();\n\n    return <p id={formDescriptionId} className={cn(\"text-sm text-light-text\", className)} {...rest} ref={passedRef} />;\n  }\n);\nFormDescription.displayName = \"FormDescription\";\n\nconst FormMessage = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(\n  ({ className, children, ...rest }, passedRef) => {\n    const { error, formMessageId } = useFormField();\n    const body = error ? String(error?.message) : children;\n\n    if (!body) {\n      return null;\n    }\n\n    return (\n      <p id={formMessageId} className={cn(\"text-sm font-medium text-danger\", className)} {...rest} ref={passedRef}>\n        {body}\n      </p>\n    );\n  }\n);\nFormMessage.displayName = \"FormMessage\";\n\nconst useForm = <TFormSchema extends Zod.Schema>({\n  schema,\n  ...rest\n}: Omit<UseFormProps<TypeOf<TFormSchema>>, \"resolver\"> & {\n  schema: TFormSchema;\n}) => {\n  const form = useRHFForm({\n    ...rest,\n    resolver: zodResolver(schema),\n  });\n\n  return form;\n};\n\ntype FormContext = {\n  disabled: boolean;\n};\n\nconst FormContext = React.createContext({} as FormContext);\n\nconst Form = <T extends FieldValues>({\n  children,\n  form,\n  disabled: passedDisabled = false,\n  disableWhileSubmitting = true,\n  onSubmit,\n  ...rest\n}: Omit<React.ComponentProps<\"form\">, \"onSubmit\"> & {\n  form: UseFormReturn<T>;\n  onSubmit?: SubmitHandler<T>;\n  disabled?: boolean;\n  disableWhileSubmitting?: boolean;\n}) => {\n  const disabledDueToSubmitting = form.formState.isSubmitting && disableWhileSubmitting;\n  const disabled = passedDisabled || disabledDueToSubmitting;\n\n  const handleSubmit = form.handleSubmit((...args) => {\n    if (disabled) {\n      return;\n    }\n    if (onSubmit) {\n      onSubmit(...args);\n    }\n  });\n\n  return (\n    <FormProvider {...form}>\n      <FormContext.Provider value={{ disabled }}>\n        <form {...rest} onSubmit={handleSubmit}>\n          {children}\n        </form>\n      </FormContext.Provider>\n    </FormProvider>\n  );\n};\n\nexport { useFormField, Form, FormItem, FormLabel, FormControl, FormDescription, FormMessage, FormField, useForm };\n"},{"fileName":"index.ts","fileContent":"import {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n  useForm,\n} from \"./Form\";\n\nexport { useFormField, Form, FormItem, FormLabel, FormControl, FormDescription, FormMessage, FormField, useForm };\n"}]},"HoverCard":{"files":[{"fileName":"HoverCard.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixHoverCard from \"@radix-ui/react-hover-card\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst HoverCard = RadixHoverCard.Root;\n\nconst HoverCardTrigger = RadixHoverCard.Trigger;\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof RadixHoverCard.Content>,\n  React.ComponentPropsWithoutRef<typeof RadixHoverCard.Content>\n>(({ className, align = \"center\", sideOffset = 6, ...rest }, passedRef) => (\n  <RadixHoverCard.Content\n    {...rest}\n    className={cn(\n      \"z-50 w-64 animate-zoomIn rounded-md border bg-paper p-4 shadow-md outline-none data-[state=closed]:animate-zoomOut\",\n      className\n    )}\n    align={align}\n    sideOffset={sideOffset}\n    ref={passedRef}\n  />\n));\nHoverCardContent.displayName = RadixHoverCard.Content.displayName;\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent };\n"},{"fileName":"index.ts","fileContent":"import { HoverCard, HoverCardTrigger, HoverCardContent } from \"./HoverCard\";\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent };\n"}]},"Input":{"files":[{"fileName":"Input.tsx","fileContent":"import { cn } from \"@/lib/utils\";\nimport { cva } from \"class-variance-authority\";\nimport React, { ForwardedRef } from \"react\";\n\nconst ALL_INPUT_VARIANTS = {\n  size: {\n    xs: \"h-7 rounded border px-2 text-xs\",\n    sm: \"h-8 text-sm px-2.5 border rounded\",\n    md: \"h-10 text-base px-2.5 border-2 rounded-md\",\n    lg: \"h-11 text-lg px-3 border-2 rounded-md\",\n    xl: \"h-[3.25rem] text-xl px-3 border-2 rounded-[0.425rem]\",\n  },\n} as const;\n\ntype InputVariants = {\n  [k in keyof typeof ALL_INPUT_VARIANTS]: keyof (typeof ALL_INPUT_VARIANTS)[k];\n};\n\nconst DEFAULT_VARIANTS = {\n  size: \"md\",\n} satisfies InputVariants;\n\nconst inputVariants = cva(\n  \"flex border border-border py-1 bg-transparent transition focus-visible:outline-0 focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background focus-visible:hover:border-border disabled:opacity-50 aria-[invalid=true]:border-invalid aria-[invalid=true]:hover:border-invalid aria-[invalid=true]:focus-visible:ring-invalid/75 placeholder:text-light-text\",\n  {\n    variants: ALL_INPUT_VARIANTS,\n    defaultVariants: DEFAULT_VARIANTS,\n  }\n);\n\nconst Input = React.forwardRef(\n  (\n    {\n      className,\n      variants = DEFAULT_VARIANTS,\n      ...rest\n    }: React.ComponentProps<\"input\"> & {\n      variants?: Partial<InputVariants>;\n    },\n    passedRef: ForwardedRef<HTMLInputElement>\n  ) => {\n    return <input {...rest} className={cn(inputVariants(variants), className)} ref={passedRef} />;\n  }\n);\n\nexport { Input, inputVariants, DEFAULT_VARIANTS, ALL_INPUT_VARIANTS, type InputVariants };\n"},{"fileName":"index.ts","fileContent":"import { Input, inputVariants, DEFAULT_VARIANTS, ALL_INPUT_VARIANTS, type InputVariants } from \"./Input\";\n\nexport { Input, inputVariants, DEFAULT_VARIANTS, ALL_INPUT_VARIANTS, type InputVariants };\n"}]},"Label":{"files":[{"fileName":"Label.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixLabel from \"@radix-ui/react-label\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof RadixLabel.Root>,\n  React.ComponentPropsWithoutRef<typeof RadixLabel.Root>\n>(({ className, ...rest }, passedRef) => (\n  <RadixLabel.Root\n    {...rest}\n    className={cn(\"text-sm font-medium leading-none peer-disabled:opacity-70\", className)}\n    ref={passedRef}\n  />\n));\nLabel.displayName = RadixLabel.Root.displayName;\n\nexport { Label };\n"},{"fileName":"index.ts","fileContent":"import { Label } from \"./Label\";\n\nexport { Label };\n"}]},"Menubar":{"files":[{"fileName":"Menubar.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixMenubar from \"@radix-ui/react-menubar\";\nimport { Check, ChevronRight, Circle } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst MenubarMenu = RadixMenubar.Menu;\n\nconst MenubarGroup = RadixMenubar.Group;\n\nconst MenubarPortal = RadixMenubar.Portal;\n\nconst MenubarSub = RadixMenubar.Sub;\n\nconst MenubarRadioGroup = RadixMenubar.RadioGroup;\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof RadixMenubar.Root>,\n  React.ComponentPropsWithoutRef<typeof RadixMenubar.Root>\n>(({ className, ...rest }, passedRef) => (\n  <RadixMenubar.Root\n    {...rest}\n    className={cn(\"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\", className)}\n    ref={passedRef}\n  />\n));\nMenubar.displayName = RadixMenubar.Root.displayName;\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof RadixMenubar.Trigger>,\n  React.ComponentPropsWithoutRef<typeof RadixMenubar.Trigger>\n>(({ className, ...rest }, passedRef) => (\n  <RadixMenubar.Trigger\n    {...rest}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded border border-transparent px-3 py-1.5 text-sm font-medium outline-none focus:border-border focus:bg-accent/50 data-[state=open]:border-border data-[state=open]:bg-accent/50\",\n      className\n    )}\n    ref={passedRef}\n  />\n));\nMenubarTrigger.displayName = RadixMenubar.Trigger.displayName;\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof RadixMenubar.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof RadixMenubar.SubTrigger> & {\n    inset?: boolean;\n  }\n>(({ className, inset, children, ...rest }, passedRef) => (\n  <RadixMenubar.SubTrigger\n    {...rest}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded border border-transparent px-2 py-1.5 text-sm outline-none focus:border-border focus:bg-accent/50 data-[state=open]:border-border data-[state=open]:bg-accent/50\",\n      inset && \"pl-8\",\n      className\n    )}\n    ref={passedRef}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </RadixMenubar.SubTrigger>\n));\nMenubarSubTrigger.displayName = RadixMenubar.SubTrigger.displayName;\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof RadixMenubar.SubContent>,\n  React.ComponentPropsWithoutRef<typeof RadixMenubar.SubContent>\n>(({ className, ...rest }, passedRef) => (\n  <RadixMenubar.SubContent\n    {...rest}\n    className={cn(\n      \"z-50 min-w-[8rem] animate-zoomIn rounded-md border bg-paper p-1 data-[state=closed]:animate-none data-[state=open]:data-[side=bottom]:animate-slideInTop/5 data-[state=open]:data-[side=left]:animate-slideInRight/5 data-[state=open]:data-[side=right]:animate-slideInLeft/5 data-[state=open]:data-[side=top]:animate-slideInBottom/5\",\n      className\n    )}\n    ref={passedRef}\n  />\n));\nMenubarSubContent.displayName = RadixMenubar.SubContent.displayName;\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof RadixMenubar.Content>,\n  React.ComponentPropsWithoutRef<typeof RadixMenubar.Content>\n>(({ className, align = \"start\", alignOffset = -4, sideOffset = 8, ...rest }, passedRef) => (\n  <RadixMenubar.Portal>\n    <RadixMenubar.Content\n      {...rest}\n      align={align}\n      alignOffset={alignOffset}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[12rem] animate-zoomIn rounded-md border bg-paper p-1 shadow-md data-[state=closed]:animate-none data-[state=open]:data-[side=bottom]:animate-slideInTop/5 data-[state=open]:data-[side=left]:animate-slideInRight/5 data-[state=open]:data-[side=right]:animate-slideInLeft/5 data-[state=open]:data-[side=top]:animate-slideInBottom/5\",\n        className\n      )}\n      ref={passedRef}\n    />\n  </RadixMenubar.Portal>\n));\nMenubarContent.displayName = RadixMenubar.Content.displayName;\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof RadixMenubar.Item>,\n  React.ComponentPropsWithoutRef<typeof RadixMenubar.Item> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...rest }, passedRef) => (\n  <RadixMenubar.Item\n    {...rest}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded border border-transparent px-2 py-1.5 text-sm outline-none hover:border-border hover:bg-accent/50 focus:border-border focus:bg-accent/50 data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    ref={passedRef}\n  />\n));\nMenubarItem.displayName = RadixMenubar.Item.displayName;\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof RadixMenubar.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof RadixMenubar.CheckboxItem>\n>(({ className, children, checked, ...rest }, passedRef) => (\n  <RadixMenubar.CheckboxItem\n    {...rest}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded border border-transparent py-1.5 pl-8 pr-2 text-sm outline-none hover:border-border hover:bg-accent/50 focus:border-border focus:bg-accent/50 data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    ref={passedRef}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <RadixMenubar.ItemIndicator>\n        <Check className=\"h-4 w-4 text-primary\" />\n      </RadixMenubar.ItemIndicator>\n    </span>\n    {children}\n  </RadixMenubar.CheckboxItem>\n));\nMenubarCheckboxItem.displayName = RadixMenubar.CheckboxItem.displayName;\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof RadixMenubar.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof RadixMenubar.RadioItem>\n>(({ className, children, ...rest }, passedRef) => (\n  <RadixMenubar.RadioItem\n    {...rest}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded border border-transparent py-1.5 pl-8 pr-2 text-sm outline-none hover:border-border hover:bg-accent/50 focus:border-border focus:bg-accent/50 data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    ref={passedRef}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <RadixMenubar.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-primary text-primary\" />\n      </RadixMenubar.ItemIndicator>\n    </span>\n    {children}\n  </RadixMenubar.RadioItem>\n));\nMenubarRadioItem.displayName = RadixMenubar.RadioItem.displayName;\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof RadixMenubar.Label>,\n  React.ComponentPropsWithoutRef<typeof RadixMenubar.Label> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...rest }, passedRef) => (\n  <RadixMenubar.Label\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", inset && \"pl-8\", className)}\n    {...rest}\n    ref={passedRef}\n  />\n));\nMenubarLabel.displayName = RadixMenubar.Label.displayName;\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof RadixMenubar.Separator>,\n  React.ComponentPropsWithoutRef<typeof RadixMenubar.Separator>\n>(({ className, ...rest }, passedRef) => (\n  <RadixMenubar.Separator {...rest} className={cn(\"-mx-1 my-1 h-px bg-muted\", className)} ref={passedRef} />\n));\nMenubarSeparator.displayName = RadixMenubar.Separator.displayName;\n\nconst MenubarShortcut = React.forwardRef(\n  ({ className, ...rest }: React.HTMLAttributes<HTMLSpanElement>, passedRef: React.ForwardedRef<HTMLSpanElement>) => {\n    return (\n      <span {...rest} className={cn(\"ml-auto text-xs tracking-widest text-light-text\", className)} ref={passedRef} />\n    );\n  }\n);\nMenubarShortcut.displayName = \"MenubarShortcut\";\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n};\n"},{"fileName":"index.ts","fileContent":"import {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n} from \"./Menubar\";\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n};\n"}]},"NavigationMenu":{"files":[{"fileName":"NavigationMenu.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\n\nimport * as RadixNavigationMenu from \"@radix-ui/react-navigation-menu\";\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\nimport { ChevronDownIcon } from \"lucide-react\";\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof RadixNavigationMenu.Root>,\n  React.ComponentPropsWithoutRef<typeof RadixNavigationMenu.Root>\n>(({ className, children, ...rest }, passedRef) => (\n  <RadixNavigationMenu.Root\n    {...rest}\n    className={cn(\"relative z-10 flex max-w-max flex-1 items-center justify-center\", className)}\n    ref={passedRef}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </RadixNavigationMenu.Root>\n));\nNavigationMenu.displayName = RadixNavigationMenu.Root.displayName;\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof RadixNavigationMenu.List>,\n  React.ComponentPropsWithoutRef<typeof RadixNavigationMenu.List>\n>(({ className, ...rest }, passedRef) => (\n  <RadixNavigationMenu.List\n    {...rest}\n    className={cn(\"group flex flex-1 list-none items-center justify-center space-x-1\", className)}\n    ref={passedRef}\n  />\n));\nNavigationMenuList.displayName = RadixNavigationMenu.List.displayName;\n\nconst NavigationMenuItem = RadixNavigationMenu.Item;\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent/50 focus-visible:bg-accent/50 focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50 hover:border-border border border-transparent focus-visible:border-border data-[state=open]:border-border\"\n);\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof RadixNavigationMenu.Trigger>,\n  React.ComponentPropsWithoutRef<typeof RadixNavigationMenu.Trigger>\n>(({ className, children, ...rest }, passedRef) => (\n  <RadixNavigationMenu.Trigger\n    {...rest}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    ref={passedRef}\n  >\n    {children}{\" \"}\n    <ChevronDownIcon\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </RadixNavigationMenu.Trigger>\n));\nNavigationMenuTrigger.displayName = RadixNavigationMenu.Trigger.displayName;\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof RadixNavigationMenu.Content>,\n  React.ComponentPropsWithoutRef<typeof RadixNavigationMenu.Content>\n>(({ className, ...rest }, passedRef) => (\n  <RadixNavigationMenu.Content\n    {...rest}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion=from-end]:animate-slideInRight data-[motion=from-start]:animate-slideInLeft data-[motion=to-end]:animate-slideOutRight data-[motion=to-start]:animate-slideOutLeft md:absolute md:w-auto \",\n      className\n    )}\n    ref={passedRef}\n  />\n));\nNavigationMenuContent.displayName = RadixNavigationMenu.Content.displayName;\n\nconst NavigationMenuLink = RadixNavigationMenu.Link;\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof RadixNavigationMenu.Viewport>,\n  React.ComponentPropsWithoutRef<typeof RadixNavigationMenu.Viewport>\n>(({ className, ...rest }, passedRef) => (\n  <div className={cn(\"absolute left-0 top-full mt-2 flex justify-center\")}>\n    <RadixNavigationMenu.Viewport\n      {...rest}\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full animate-zoomIn overflow-hidden rounded-md border bg-paper shadow data-[state=closed]:animate-zoomOut md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={passedRef}\n    />\n  </div>\n));\nNavigationMenuViewport.displayName = RadixNavigationMenu.Viewport.displayName;\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof RadixNavigationMenu.Indicator>,\n  React.ComponentPropsWithoutRef<typeof RadixNavigationMenu.Indicator>\n>(({ className, ...rest }, passedRef) => (\n  <RadixNavigationMenu.Indicator\n    {...rest}\n    className={cn(\n      \"top-full z-[1] flex h-3 items-end justify-center overflow-hidden data-[state=hidden]:animate-fadeOut data-[state=visible]:animate-fadeIn\",\n      className\n    )}\n    ref={passedRef}\n  >\n    <div className=\"relative top-[60%] h-full w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </RadixNavigationMenu.Indicator>\n));\nNavigationMenuIndicator.displayName = RadixNavigationMenu.Indicator.displayName;\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n};\n"},{"fileName":"index.ts","fileContent":"import {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n} from \"./NavigationMenu\";\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n};\n"}]},"Popover":{"files":[{"fileName":"Popover.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixPopover from \"@radix-ui/react-popover\";\nimport { cn } from \"@/lib/utils\";\n\nconst Popover = RadixPopover.Root;\n\nconst PopoverTrigger = RadixPopover.Trigger;\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof RadixPopover.Content>,\n  React.ComponentPropsWithoutRef<typeof RadixPopover.Content>\n>(({ className, align = \"center\", sideOffset = 8, ...rest }, passedRef) => (\n  <RadixPopover.Portal>\n    <RadixPopover.Content\n      {...rest}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 animate-zoomIn rounded-md border bg-paper p-4 shadow-md focus-visible:outline-none data-[state=closed]:animate-zoomOut\",\n        className\n      )}\n      ref={passedRef}\n    />\n  </RadixPopover.Portal>\n));\nPopoverContent.displayName = RadixPopover.Content.displayName;\n\nexport { Popover, PopoverTrigger, PopoverContent };\n"},{"fileName":"index.ts","fileContent":"import { Popover, PopoverTrigger, PopoverContent } from \"./Popover\";\n\nexport { Popover, PopoverTrigger, PopoverContent };\n"}]},"Progress":{"files":[{"fileName":"Progress.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixProgress from \"@radix-ui/react-progress\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof RadixProgress.Root>,\n  React.ComponentPropsWithoutRef<typeof RadixProgress.Root>\n>(({ className, value, ...rest }, passedRef) => (\n  <RadixProgress.Root\n    {...rest}\n    className={cn(\"relative h-4 w-full overflow-hidden rounded-full bg-muted\", className)}\n    ref={passedRef}\n  >\n    <RadixProgress.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value ?? 0)}%)` }}\n    />\n  </RadixProgress.Root>\n));\nProgress.displayName = RadixProgress.Root.displayName;\n\nexport { Progress };\n"},{"fileName":"index.ts","fileContent":"import { Progress } from \"./Progress\";\n\nexport { Progress };\n"}]},"RadioGroup":{"files":[{"fileName":"RadioGroup.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixRadioGroup from \"@radix-ui/react-radio-group\";\nimport { Circle } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\ntype RadioGroupContext = {\n  invalid: boolean;\n};\n\nconst RadioGroupContext = React.createContext({} as RadioGroupContext);\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadixRadioGroup.Root>,\n  React.ComponentPropsWithoutRef<typeof RadixRadioGroup.Root>\n>(({ className, \"aria-invalid\": ariaInvalid, ...rest }, passedRef) => {\n  return (\n    <RadioGroupContext.Provider value={{ invalid: ariaInvalid !== undefined && ariaInvalid !== false }}>\n      <RadixRadioGroup.Root\n        {...rest}\n        className={cn(\"grid gap-2\", className)}\n        aria-invalid={ariaInvalid}\n        ref={passedRef}\n      />\n    </RadioGroupContext.Provider>\n  );\n});\nRadioGroup.displayName = RadixRadioGroup.Root.displayName;\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadixRadioGroup.Item>,\n  React.ComponentPropsWithoutRef<typeof RadixRadioGroup.Item>\n>(({ className, children, \"aria-invalid\": ariaInvalid, ...rest }, passedRef) => {\n  const { invalid: groupInvalid } = React.useContext(RadioGroupContext);\n\n  return (\n    <RadixRadioGroup.Item\n      {...rest}\n      className={cn(\n        \"group aspect-square h-4 w-4 rounded-full border border-border text-border ring-offset-background transition focus:outline-none focus-visible:ring-2 focus-visible:ring-ring/50 focus-visible:ring-offset-2 disabled:opacity-50 aria-[invalid=true]:border-invalid aria-[invalid=true]:ring-invalid/75 enabled:data-[state=unchecked]:hover:bg-accent/50\",\n        className\n      )}\n      aria-invalid={ariaInvalid ?? groupInvalid}\n      ref={passedRef}\n    >\n      <RadixRadioGroup.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-primary text-primary group-aria-[invalid=true]:fill-invalid group-aria-[invalid=true]:text-invalid\" />\n      </RadixRadioGroup.Indicator>\n    </RadixRadioGroup.Item>\n  );\n});\nRadioGroupItem.displayName = RadixRadioGroup.Item.displayName;\n\nexport { RadioGroup, RadioGroupItem };\n"},{"fileName":"index.ts","fileContent":"import { RadioGroup, RadioGroupItem } from \"./RadioGroup\";\n\nexport { RadioGroup, RadioGroupItem };\n"}]},"ScrollArea":{"files":[{"fileName":"ScrollArea.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixScrollArea from \"@radix-ui/react-scroll-area\";\nimport { cn } from \"@/lib/utils\";\n\nconst ScrollAreaRoot = React.forwardRef<\n  React.ElementRef<typeof RadixScrollArea.Root>,\n  React.ComponentPropsWithoutRef<typeof RadixScrollArea.Root>\n>(({ children, className, type = \"auto\", ...rest }, passedRef) => {\n  return (\n    <RadixScrollArea.Root\n      {...rest}\n      className={cn(\"relative h-full w-full overflow-hidden\", className)}\n      type={type}\n      ref={passedRef}\n    >\n      {children}\n    </RadixScrollArea.Root>\n  );\n});\nScrollAreaRoot.displayName = \"ScrollAreaRoot\";\n\nconst ScrollAreaViewport = React.forwardRef<\n  React.ElementRef<typeof RadixScrollArea.Viewport>,\n  React.ComponentPropsWithoutRef<typeof RadixScrollArea.Viewport>\n>(({ children, className }, passedRef) => {\n  return (\n    <RadixScrollArea.Viewport\n      className={cn(\"h-full w-full rounded-[inherit]\", className)}\n      //Fixes a radix ui bug where Select.Viewport sets overflow and RadixScrollArea.Viewport also sets overflow and this clashes as one uses shorthand other doesnt\n      style={{ overflowY: undefined }}\n      ref={passedRef}\n    >\n      {children}\n    </RadixScrollArea.Viewport>\n  );\n});\nScrollAreaViewport.displayName = RadixScrollArea.Viewport.displayName;\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaRoot>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaRoot>\n>(({ children, className, ...rest }, passedRef) => {\n  return (\n    <ScrollAreaRoot {...rest} className={className} ref={passedRef}>\n      <ScrollAreaViewport>{children}</ScrollAreaViewport>\n      <ScrollBar />\n    </ScrollAreaRoot>\n  );\n});\nScrollArea.displayName = RadixScrollArea.Root.displayName;\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof RadixScrollArea.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof RadixScrollArea.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...rest }, passedRef) => (\n  <RadixScrollArea.ScrollAreaScrollbar\n    {...rest}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none bg-transparent transition-colors\",\n      orientation === \"vertical\" && \"h-full w-1 hover:w-[5px]\",\n      orientation === \"horizontal\" && \"h-1 w-full hover:h-[5px]\",\n      className\n    )}\n    ref={passedRef}\n  >\n    <RadixScrollArea.ScrollAreaThumb className=\"relative flex-1 rounded bg-scroll-thumb/50 hover:bg-scroll-thumb focus-visible:bg-scroll-thumb\" />\n  </RadixScrollArea.ScrollAreaScrollbar>\n));\nScrollBar.displayName = RadixScrollArea.ScrollAreaScrollbar.displayName;\n\nexport { ScrollAreaRoot, ScrollAreaViewport, ScrollArea, ScrollBar };\n"},{"fileName":"index.ts","fileContent":"import { ScrollAreaRoot, ScrollAreaViewport, ScrollArea, ScrollBar } from \"./ScrollArea\";\n\nexport { ScrollAreaRoot, ScrollAreaViewport, ScrollArea, ScrollBar };\n"}]},"Select":{"files":[{"fileName":"Select.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixSelect from \"@radix-ui/react-select\";\nimport { cn } from \"@/lib/utils\";\nimport { ChevronDown } from \"lucide-react\";\nimport { ScrollAreaRoot, ScrollAreaViewport, ScrollBar } from \"@/components/ui/ScrollArea\";\n\nconst Select = RadixSelect.Root;\n\nconst SelectGroup = RadixSelect.Group;\n\nconst SelectValue = RadixSelect.Value;\n\n//These classes are reused for Autocomplete\nconst selectTriggerClasses =\n  \"group flex items-center justify-center gap-2 rounded-md border-2 border-border bg-transparent py-1 pl-3 pr-2 transition focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 focus:ring-offset-background aria-[invalid=true]:border-invalid aria-[invalid=true]:focus:ring-invalid/75 data-[disabled]:opacity-50\";\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof RadixSelect.Trigger>,\n  React.ComponentPropsWithoutRef<typeof RadixSelect.Trigger>\n>(({ children, className, ...rest }, passedRef) => {\n  return (\n    <RadixSelect.Trigger {...rest} className={cn(selectTriggerClasses, className)} ref={passedRef}>\n      {children}\n      <RadixSelect.Icon asChild>\n        <ChevronDown className=\"ml-auto h-4 w-4 rotate-0 opacity-50 transition group-data-[state='open']:rotate-180\" />\n      </RadixSelect.Icon>\n    </RadixSelect.Trigger>\n  );\n});\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof RadixSelect.Content>,\n  React.ComponentPropsWithoutRef<typeof RadixSelect.Content>\n>(({ children, className, position = \"popper\", ...rest }, passedRef) => {\n  const isPopper = position === \"popper\";\n\n  return (\n    <RadixSelect.Portal className=\"animate-zoomIn data-[state=closed]:animate-zoomOut\">\n      <RadixSelect.Content\n        {...rest}\n        sideOffset={8}\n        className={cn(\n          \"relative z-[1200] min-w-[var(--radix-select-trigger-width)] rounded border bg-paper p-2 shadow-md\",\n          className\n        )}\n        position={position}\n        ref={passedRef}\n      >\n        <ScrollAreaRoot>\n          <RadixSelect.Viewport asChild className={cn(isPopper && \"max-h-56 w-full\")}>\n            <ScrollAreaViewport>{children}</ScrollAreaViewport>\n          </RadixSelect.Viewport>\n          <ScrollBar />\n        </ScrollAreaRoot>\n      </RadixSelect.Content>\n    </RadixSelect.Portal>\n  );\n});\nSelectContent.displayName = RadixSelect.Content.displayName;\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof RadixSelect.Label>,\n  React.ComponentPropsWithoutRef<typeof RadixSelect.Label>\n>(({ className, ...rest }, passedRef) => (\n  <RadixSelect.Label {...rest} className={cn(\"px-2 py-1 text-muted-text\", className)} ref={passedRef} />\n));\nSelectLabel.displayName = RadixSelect.Label.displayName;\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof RadixSelect.Item>,\n  React.ComponentPropsWithoutRef<typeof RadixSelect.Item>\n>(({ children, className, ...rest }, passedRef) => (\n  <RadixSelect.Item\n    {...rest}\n    className={cn(\n      \"my-2 flex w-full cursor-default items-center rounded border border-transparent p-1 pl-2 transition duration-75 hover:border-border focus-visible:border-border/75 focus-visible:outline-none data-[disabled]:pointer-events-none data-[state='checked']:border-border data-[state='checked']:bg-accent/50 data-[disabled]:opacity-50 data-[state='checked']:hover:border-border/75 data-[state='checked']:hover:bg-accent/90 data-[state='checked']:focus-visible:border-border/75 data-[state='checked']:focus-visible:bg-accent/90\",\n\n      className\n    )}\n    ref={passedRef}\n  >\n    <RadixSelect.ItemText>{children}</RadixSelect.ItemText>\n  </RadixSelect.Item>\n));\nSelectItem.displayName = RadixSelect.Item.displayName;\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof RadixSelect.Separator>,\n  React.ComponentPropsWithoutRef<typeof RadixSelect.Separator>\n>(({ className, ...rest }, passedRef) => <RadixSelect.Separator {...rest} className={cn(className)} ref={passedRef} />);\nSelectSeparator.displayName = RadixSelect.Separator.displayName;\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  selectTriggerClasses,\n};\n"},{"fileName":"index.ts","fileContent":"import {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  selectTriggerClasses,\n} from \"./Select\";\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  selectTriggerClasses,\n};\n"}]},"Separator":{"files":[{"fileName":"Separator.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixSeparator from \"@radix-ui/react-separator\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof RadixSeparator.Root>,\n  React.ComponentPropsWithoutRef<typeof RadixSeparator.Root>\n>(({ className, orientation = \"horizontal\", decorative = true, ...rest }, passedRef) => (\n  <RadixSeparator.Root\n    {...rest}\n    decorative={decorative}\n    orientation={orientation}\n    className={cn(\n      \"shrink-0 bg-separator\",\n      orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n      className\n    )}\n    ref={passedRef}\n  />\n));\nSeparator.displayName = RadixSeparator.Root.displayName;\n\nexport { Separator };\n"},{"fileName":"index.ts","fileContent":"import { Separator } from \"./Separator\";\n\nexport { Separator };\n"}]},"Sheet":{"files":[{"fileName":"Sheet.tsx","fileContent":"\"use client\";\nimport React from \"react\";\nimport * as RadixDialog from \"@radix-ui/react-dialog\";\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/Dialog\";\nimport { cn } from \"@/lib/utils\";\nimport { DialogAnimation, DialogPosition, dialogPositionLookup } from \"@/components/ui/Dialog/utils\";\nimport { cva } from \"class-variance-authority\";\n\nconst Sheet = Dialog;\n\nconst SheetTrigger = DialogTrigger;\n\ntype SheetPosition = Exclude<DialogPosition[\"x\"] | DialogPosition[\"y\"], \"center\">;\n\nconst ALL_SHEET_VARIANTS = {\n  size: {\n    content: undefined,\n  },\n  position: {\n    left: undefined,\n    right: undefined,\n    top: undefined,\n    bottom: undefined,\n  } satisfies {\n    [k in SheetPosition]: undefined;\n  },\n};\n\ntype SheetVariants = {\n  [k in keyof typeof ALL_SHEET_VARIANTS]: keyof (typeof ALL_SHEET_VARIANTS)[k];\n};\n\nconst DEFAULT_VARIANTS = {\n  position: \"right\",\n  size: \"content\",\n} satisfies SheetVariants;\n\nconst sheetVariants = cva(\"max-w-none sm:max-w-none\", {\n  variants: {\n    size: {\n      content: undefined,\n    },\n    position: {\n      left: undefined,\n      right: undefined,\n      top: undefined,\n      bottom: undefined,\n    } satisfies {\n      [k in SheetPosition]: undefined;\n    },\n  },\n  compoundVariants: [\n    { position: \"left\", className: \"h-full\" },\n    { position: \"right\", className: \"h-full\" },\n    { position: \"top\", className: \"w-full\" },\n    { position: \"bottom\", className: \"w-full\" },\n    {\n      size: \"content\",\n      position: \"left\",\n      className: \"w-max\",\n    },\n    {\n      size: \"content\",\n      position: \"right\",\n      className: \"w-max\",\n    },\n    {\n      size: \"content\",\n      position: \"top\",\n      className: \"h-max\",\n    },\n    {\n      size: \"content\",\n      position: \"bottom\",\n      className: \"h-max\",\n    },\n  ],\n  defaultVariants: DEFAULT_VARIANTS,\n});\n\nconst animationHelper = {\n  left: \"slideLeft\",\n  right: \"slideRight\",\n  top: \"slideTop\",\n  bottom: \"slideBottom\",\n} satisfies {\n  [k in SheetPosition]: DialogAnimation;\n};\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof DialogContent>,\n  React.ComponentPropsWithoutRef<typeof RadixDialog.Content> & {\n    variants?: Partial<Omit<SheetVariants, \"position\">>;\n    position?: SheetVariants[\"position\"];\n    animation?: DialogAnimation;\n  }\n>(\n  (\n    {\n      children,\n      className,\n      variants = DEFAULT_VARIANTS,\n      position: passedPosition = \"right\",\n      animation: passedAnimation,\n      ...rest\n    },\n    passedRef\n  ) => {\n    const isVertical = passedPosition in dialogPositionLookup[\"y\"];\n\n    const position = {\n      x: (isVertical ? \"center\" : passedPosition) as DialogPosition[\"x\"],\n      y: (isVertical ? passedPosition : \"center\") as DialogPosition[\"y\"],\n    };\n\n    const animation = animationHelper[passedPosition];\n\n    return (\n      <DialogContent\n        {...rest}\n        position={position}\n        animation={animation}\n        className={cn(sheetVariants({ ...variants, position: passedPosition }), className)}\n        ref={passedRef}\n      >\n        {children}\n      </DialogContent>\n    );\n  }\n);\n\nconst SheetHeader = DialogHeader;\n\nconst SheetFooter = DialogFooter;\nconst SheetTitle = DialogTitle;\nconst SheetDescription = DialogDescription;\nconst SheetClose = DialogClose;\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n  SheetClose,\n  type SheetPosition,\n};\n"},{"fileName":"index.ts","fileContent":"import {\n  Sheet,\n  SheetTrigger,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n  SheetClose,\n  type SheetPosition,\n} from \"./Sheet\";\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n  SheetClose,\n  type SheetPosition,\n};\n"}]},"Skeleton":{"files":[{"fileName":"Skeleton.tsx","fileContent":"import React, { ForwardedRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nconst Skeleton = React.forwardRef(\n  ({ className, ...rest }: React.HTMLAttributes<HTMLDivElement>, passedRef: ForwardedRef<HTMLDivElement>) => {\n    return <div {...rest} className={cn(\"animate-pulse rounded-md bg-muted\", className)} ref={passedRef} />;\n  }\n);\n\nSkeleton.displayName = \"Skeleton\";\n\nexport { Skeleton };\n"},{"fileName":"index.ts","fileContent":"import { Skeleton } from \"./Skeleton\";\n\nexport { Skeleton };\n"}]},"Slider":{"files":[{"fileName":"Slider.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixSlider from \"@radix-ui/react-slider\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst SliderRoot = React.forwardRef<\n  React.ElementRef<typeof RadixSlider.Root>,\n  React.ComponentPropsWithoutRef<typeof RadixSlider.Root>\n>(({ children, className, ...rest }, passedRef) => {\n  return (\n    <RadixSlider.Root\n      {...rest}\n      className={cn(\"relative flex w-full touch-none select-none items-center\", className)}\n      ref={passedRef}\n    >\n      {children}\n    </RadixSlider.Root>\n  );\n});\nSliderRoot.displayName = RadixSlider.Root.displayName;\n\nconst SliderTrack = React.forwardRef<\n  React.ElementRef<typeof RadixSlider.Track>,\n  React.ComponentPropsWithoutRef<typeof RadixSlider.Track>\n>(({ children, className, ...rest }, passedRef) => {\n  return (\n    <RadixSlider.Track\n      className={cn(\"relative h-2 w-full grow overflow-hidden rounded-full bg-muted\", className)}\n      {...rest}\n      ref={passedRef}\n    >\n      {children}\n    </RadixSlider.Track>\n  );\n});\nSliderTrack.displayName = RadixSlider.Track.displayName;\n\nconst SliderRange = React.forwardRef<\n  React.ElementRef<typeof RadixSlider.Range>,\n  React.ComponentPropsWithoutRef<typeof RadixSlider.Range>\n>(({ children, className, ...rest }, passedRef) => {\n  return (\n    <RadixSlider.Range {...rest} className={cn(\"absolute h-full bg-primary\", className)} ref={passedRef}>\n      {children}\n    </RadixSlider.Range>\n  );\n});\nSliderRange.displayName = RadixSlider.Range.displayName;\n\nconst SliderThumb = React.forwardRef<\n  React.ElementRef<typeof RadixSlider.Range>,\n  React.ComponentPropsWithoutRef<typeof RadixSlider.Range>\n>(({ children, className, ...rest }, passedRef) => {\n  return (\n    <RadixSlider.Thumb\n      {...rest}\n      className={cn(\n        \"block h-5 w-5 rounded-full border-2 border-border bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n        className\n      )}\n      ref={passedRef}\n    >\n      {children}\n    </RadixSlider.Thumb>\n  );\n});\nSliderThumb.displayName = RadixSlider.Thumb.displayName;\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof RadixSlider.Root>,\n  React.ComponentPropsWithoutRef<typeof RadixSlider.Root>\n>((props, passedRef) => (\n  <SliderRoot {...props} ref={passedRef}>\n    <SliderTrack>\n      <SliderRange />\n    </SliderTrack>\n    <SliderThumb />\n  </SliderRoot>\n));\nSlider.displayName = RadixSlider.Root.displayName;\n\nconst RangeSlider = React.forwardRef<\n  React.ElementRef<typeof RadixSlider.Root>,\n  React.ComponentPropsWithoutRef<typeof RadixSlider.Root>\n>((props, passedRef) => (\n  <SliderRoot {...props} ref={passedRef}>\n    <SliderTrack>\n      <SliderRange />\n    </SliderTrack>\n    <SliderThumb />\n    <SliderThumb />\n  </SliderRoot>\n));\nRangeSlider.displayName = RadixSlider.Root.displayName;\n\nexport { SliderRoot, SliderTrack, SliderRange, SliderThumb, Slider, RangeSlider };\n"},{"fileName":"index.ts","fileContent":"import { SliderRoot, SliderTrack, SliderRange, SliderThumb, Slider, RangeSlider } from \"./Slider\";\n\nexport { SliderRoot, SliderTrack, SliderRange, SliderThumb, Slider, RangeSlider };\n"}]},"Switch":{"files":[{"fileName":"Switch.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixSwitch from \"@radix-ui/react-switch\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof RadixSwitch.Root>,\n  React.ComponentPropsWithoutRef<typeof RadixSwitch.Root>\n>(({ className, ...rest }, passedRef) => (\n  <RadixSwitch.Root\n    {...rest}\n    className={cn(\n      \"group peer inline-flex h-[24px] w-[44px] shrink-0 items-center rounded-full border border-border/50 bg-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring/75 focus-visible:ring-offset-2 focus-visible:ring-offset-background enabled:cursor-pointer disabled:opacity-50 aria-[invalid=true]:border-invalid/50 aria-[invalid=true]:ring-invalid/75 data-[state=checked]:border-border enabled:data-[state=unchecked]:hover:bg-accent/50 aria-[invalid=true]:data-[state=checked]:border-invalid\",\n      className\n    )}\n    ref={passedRef}\n  >\n    <RadixSwitch.Thumb\n      className={cn(\n        \"pointer-events-none block h-[18px] w-[18px] rounded-full bg-accent/50 shadow-lg ring-0 transition group-aria-[invalid=true]:bg-invalid/25 data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-1 data-[state=checked]:bg-primary group-aria-[invalid=true]:data-[state=checked]:bg-invalid\"\n      )}\n    />\n  </RadixSwitch.Root>\n));\nSwitch.displayName = RadixSwitch.Root.displayName;\n\nexport { Switch };\n"},{"fileName":"index.ts","fileContent":"import { Switch } from \"./Switch\";\n\nexport { Switch };\n"}]},"Table":{"files":[{"fileName":"Table.tsx","fileContent":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(\n  ({ className, ...rest }, passedRef) => (\n    <div className=\"w-full overflow-auto\">\n      <table {...rest} className={cn(\"w-full caption-bottom text-sm\", className)} ref={passedRef} />\n    </div>\n  )\n);\nTable.displayName = \"Table\";\n\nconst TableHeader = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...rest }, passedRef) => (\n    <thead {...rest} className={cn(\"[&_tr]:border-b\", className)} ref={passedRef} />\n  )\n);\nTableHeader.displayName = \"TableHeader\";\n\nconst TableBody = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...rest }, passedRef) => (\n    <tbody {...rest} className={cn(\"[&_tr:last-child]:border-0\", className)} ref={passedRef} />\n  )\n);\nTableBody.displayName = \"TableBody\";\n\nconst TableFooter = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...rest }, passedRef) => (\n    <tfoot {...rest} className={cn(\"bg-muted font-medium\", className)} ref={passedRef} />\n  )\n);\nTableFooter.displayName = \"TableFooter\";\n\nconst TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(\n  ({ className, ...rest }, passedRef) => (\n    <tr\n      {...rest}\n      className={cn(\"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\", className)}\n      ref={passedRef}\n    />\n  )\n);\nTableRow.displayName = \"TableRow\";\n\nconst TableHead = React.forwardRef<HTMLTableCellElement, React.ThHTMLAttributes<HTMLTableCellElement>>(\n  ({ className, ...rest }, passedRef) => (\n    <th\n      {...rest}\n      className={cn(\n        \"h-12 px-4 text-left align-middle font-medium text-light-text [&:has([role=checkbox])]:pr-0\",\n        className\n      )}\n      ref={passedRef}\n    />\n  )\n);\nTableHead.displayName = \"TableHead\";\n\nconst TableCell = React.forwardRef<HTMLTableCellElement, React.TdHTMLAttributes<HTMLTableCellElement>>(\n  ({ className, ...rest }, passedRef) => (\n    <td {...rest} className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)} ref={passedRef} />\n  )\n);\nTableCell.displayName = \"TableCell\";\n\nconst TableCaption = React.forwardRef<HTMLTableCaptionElement, React.HTMLAttributes<HTMLTableCaptionElement>>(\n  ({ className, ...rest }, passedRef) => (\n    <caption {...rest} className={cn(\"mt-4 text-sm text-light-text\", className)} ref={passedRef} />\n  )\n);\nTableCaption.displayName = \"TableCaption\";\n\nexport { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption };\n"},{"fileName":"index.ts","fileContent":"import { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption } from \"./Table\";\n\nexport { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption };\n"}]},"Tabs":{"files":[{"fileName":"Tabs.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixTabs from \"@radix-ui/react-tabs\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Tabs = RadixTabs.Root;\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof RadixTabs.List>,\n  React.ComponentPropsWithoutRef<typeof RadixTabs.List>\n>(({ className, ...rest }, passedRef) => (\n  <RadixTabs.List\n    {...rest}\n    className={cn(\"inline-flex items-center justify-center rounded-md border bg-paper p-1\", className)}\n    ref={passedRef}\n  />\n));\nTabsList.displayName = RadixTabs.List.displayName;\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof RadixTabs.Trigger>,\n  React.ComponentPropsWithoutRef<typeof RadixTabs.Trigger>\n>(({ className, ...rest }, passedRef) => (\n  <RadixTabs.Trigger\n    {...rest}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md border border-transparent px-3 py-1.5 text-sm font-medium text-light-text ring-offset-background transition focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring/75 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:border-border data-[state=active]:bg-accent/50 data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    ref={passedRef}\n  />\n));\nTabsTrigger.displayName = RadixTabs.Trigger.displayName;\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof RadixTabs.Content>,\n  React.ComponentPropsWithoutRef<typeof RadixTabs.Content>\n>(({ className, ...rest }, passedRef) => (\n  <RadixTabs.Content\n    {...rest}\n    className={cn(\n      \"mt-2 ring-offset-background transition focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    ref={passedRef}\n  />\n));\nTabsContent.displayName = RadixTabs.Content.displayName;\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };\n"},{"fileName":"index.ts","fileContent":"import { Tabs, TabsList, TabsTrigger, TabsContent } from \"./Tabs\";\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };\n"}]},"Textarea":{"files":[{"fileName":"Textarea.tsx","fileContent":"import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { ForwardedRef } from \"react\";\nimport { DEFAULT_VARIANTS, InputVariants, inputVariants } from \"@/components/ui/Input\";\n\nconst Textarea = React.forwardRef(\n  (\n    {\n      className,\n      variants = DEFAULT_VARIANTS,\n      ...rest\n    }: React.ComponentPropsWithoutRef<\"textarea\"> & {\n      variants?: Partial<InputVariants>;\n    },\n    passedRef: ForwardedRef<HTMLTextAreaElement>\n  ) => {\n    return (\n      <textarea {...rest} className={cn(inputVariants(variants), \"h-unset min-h-[60px]\", className)} ref={passedRef} />\n    );\n  }\n);\n\nTextarea.displayName = \"Textarea\";\n\nexport { Textarea };\n"},{"fileName":"index.ts","fileContent":"import { Textarea } from \"./Textarea\";\n\nexport { Textarea };\n"}]},"Toast":{"files":[{"fileName":"Toast.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixToast from \"@radix-ui/react-toast\";\nimport { cva } from \"class-variance-authority\";\nimport { X } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useToast } from \"./useToast\";\n\nconst ToastProvider = RadixToast.Provider;\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof RadixToast.Viewport>,\n  React.ComponentPropsWithoutRef<typeof RadixToast.Viewport>\n>(({ className, ...rest }, passedRef) => (\n  <RadixToast.Viewport\n    {...rest}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse gap-3 p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    ref={passedRef}\n  />\n));\nToastViewport.displayName = RadixToast.Viewport.displayName;\n\nconst ALL_TOAST_VARIANTS = {\n  type: {\n    default: \"border bg-paper\",\n    danger: \"danger border-danger border-danger bg-paper\",\n  },\n} as const;\n\ntype ToastVariants = {\n  [k in keyof typeof ALL_TOAST_VARIANTS]: keyof (typeof ALL_TOAST_VARIANTS)[k];\n};\n\nconst DEFAULT_VARIANTS = {\n  type: \"default\",\n} satisfies ToastVariants;\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[state=closed]:animate-slideOutRight data-[state=open]:animate-slideInTop data-[swipe=move]:transition-none data-[state=open]:sm:animate-slideInBottom\",\n  {\n    variants: ALL_TOAST_VARIANTS,\n    defaultVariants: DEFAULT_VARIANTS,\n  }\n);\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof RadixToast.Root>,\n  React.ComponentPropsWithoutRef<typeof RadixToast.Root> & {\n    variants?: Partial<ToastVariants>;\n  }\n>(({ className, variants = DEFAULT_VARIANTS, ...rest }, passedRef) => {\n  return <RadixToast.Root {...rest} className={cn(toastVariants(variants), className)} ref={passedRef} />;\n});\nToast.displayName = RadixToast.Root.displayName;\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof RadixToast.Action>,\n  React.ComponentPropsWithoutRef<typeof RadixToast.Action>\n>(({ className, ...rest }, passedRef) => (\n  <RadixToast.Action\n    {...rest}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:border-border hover:bg-accent/50 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 focus-visible:border-border focus-visible:bg-accent/50 disabled:pointer-events-none disabled:opacity-50 group-[.danger]:hover:border-danger/30 group-[.danger]:hover:bg-danger/50 group-[.danger]:focus:ring-danger/75 group-[.danger]:focus-visible:border-danger/30 group-[.danger]:focus-visible:bg-danger/50\",\n\n      className\n    )}\n    ref={passedRef}\n  />\n));\nToastAction.displayName = RadixToast.Action.displayName;\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof RadixToast.Close>,\n  React.ComponentPropsWithoutRef<typeof RadixToast.Close>\n>(({ className, ...rest }, passedRef) => (\n  <RadixToast.Close\n    {...rest}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring/75 group-hover:opacity-100 group-[.danger]:text-red-300 group-[.danger]:hover:text-danger group-[.danger]:focus:ring-danger/75\",\n      className\n    )}\n    toast-close=\"\"\n    ref={passedRef}\n  >\n    <X className=\"h-4 w-4\" />\n  </RadixToast.Close>\n));\nToastClose.displayName = RadixToast.Close.displayName;\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof RadixToast.Title>,\n  React.ComponentPropsWithoutRef<typeof RadixToast.Title>\n>(({ className, ...rest }, passedRef) => (\n  <RadixToast.Title {...rest} className={cn(\"text-sm font-semibold\", className)} ref={passedRef} />\n));\nToastTitle.displayName = RadixToast.Title.displayName;\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof RadixToast.Description>,\n  React.ComponentPropsWithoutRef<typeof RadixToast.Description>\n>(({ className, ...rest }, passedRef) => (\n  <RadixToast.Description {...rest} className={cn(\"text-sm opacity-90\", className)} ref={passedRef} />\n));\nToastDescription.displayName = RadixToast.Description.displayName;\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>;\n\nconst Toaster = (props: React.ComponentPropsWithoutRef<typeof ToastProvider>) => {\n  const { toasts } = useToast();\n\n  return (\n    <ToastProvider {...props}>\n      {toasts.map(function ({ id, title, description, action, ...rest }) {\n        return (\n          <Toast key={id} {...rest}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && <ToastDescription>{description}</ToastDescription>}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        );\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  );\n};\n\nexport {\n  Toaster,\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n  ALL_TOAST_VARIANTS,\n  DEFAULT_VARIANTS,\n  type ToastVariants,\n};\n"},{"fileName":"index.ts","fileContent":"import {\n  Toaster,\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n  ALL_TOAST_VARIANTS,\n  DEFAULT_VARIANTS,\n  type ToastVariants,\n} from \"./Toast\";\n\nimport { useToast, toast } from \"./useToast\";\n\nexport {\n  Toaster,\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n  ALL_TOAST_VARIANTS,\n  DEFAULT_VARIANTS,\n  type ToastVariants,\n  useToast,\n  toast,\n};\n"},{"fileName":"useToast.ts","fileContent":"\"use client\";\n\nimport * as React from \"react\";\n\nimport type { ToastActionElement, ToastProps } from \"./Toast\";\n\nconst TOAST_LIMIT = 3;\nconst TOAST_REMOVE_DELAY_IN_MS = 1000000; //Used to wait for animation to finish before removing\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const;\n\nlet count = 0;\n\nconst genId = () => {\n  count = (count + 1) % Number.MAX_VALUE;\n  return count.toString();\n};\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY_IN_MS);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nconst dispatch = (action: Action) => {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n};\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nconst toast = ({ ...props }: Toast) => {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n};\n\nconst useToast = () => {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n};\n\nexport { useToast, toast };\n"}]},"Toggle":{"files":[{"fileName":"Toggle.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixToggle from \"@radix-ui/react-toggle\";\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ALL_TOGGLE_VARIANTS = {\n  type: {\n    default: \"border border-border/50 data-[state=on]:border-border\",\n    borderless: \"\",\n  },\n  size: {\n    md: \"h-10 px-3\",\n    sm: \"h-9 px-2.5\",\n    lg: \"h-11 px-5\",\n  },\n};\n\ntype ToggleVariants = { [k in keyof typeof ALL_TOGGLE_VARIANTS]: keyof (typeof ALL_TOGGLE_VARIANTS)[k] };\n\nconst DEFAULT_VARIANTS = {\n  type: \"default\",\n  size: \"md\",\n} satisfies ToggleVariants;\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors enabled:hover:bg-accent/50 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent/50 bg-paper\",\n  {\n    variants: ALL_TOGGLE_VARIANTS,\n    defaultVariants: DEFAULT_VARIANTS,\n  }\n);\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof RadixToggle.Root>,\n  React.ComponentPropsWithoutRef<typeof RadixToggle.Root> & {\n    variants?: Partial<ToggleVariants>;\n  }\n>(({ className, variants = DEFAULT_VARIANTS, ...rest }, passedRef) => (\n  <RadixToggle.Root {...rest} className={cn(toggleVariants(variants))} ref={passedRef} />\n));\n\nToggle.displayName = RadixToggle.Root.displayName;\n\nexport { Toggle, toggleVariants, ALL_TOGGLE_VARIANTS, DEFAULT_VARIANTS, type ToggleVariants };\n"},{"fileName":"index.ts","fileContent":"import { Toggle, toggleVariants, ALL_TOGGLE_VARIANTS, DEFAULT_VARIANTS, type ToggleVariants } from \"./Toggle\";\n\nexport { Toggle, toggleVariants, ALL_TOGGLE_VARIANTS, DEFAULT_VARIANTS, type ToggleVariants };\n"}]},"ToggleGroup":{"files":[{"fileName":"ToggleGroup.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixToggleGroup from \"@radix-ui/react-toggle-group\";\nimport { DEFAULT_VARIANTS, ToggleVariants, toggleVariants } from \"@/components/ui/Toggle\";\nimport { cn } from \"@/lib/utils\";\n\ntype ToggleGroupContext = {\n  autoAdjustBorders: boolean;\n};\n\nconst ToggleGroupContext = React.createContext({} as ToggleGroupContext);\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof RadixToggleGroup.Root>,\n  React.ComponentPropsWithoutRef<typeof RadixToggleGroup.Root> & {\n    /**\n     * Adjusts border radii of items to look good in a group i.e.\n     * sets the first items right border radii to none and last items left border radii\n     * to none and all other items have their borders set to none\n     */\n    autoAdjustBorders?: ToggleGroupContext[\"autoAdjustBorders\"];\n  }\n>(({ children, className, autoAdjustBorders = true, ...rest }, passedRef) => {\n  return (\n    <RadixToggleGroup.Root {...rest} className={cn(className)} ref={passedRef}>\n      <ToggleGroupContext.Provider value={{ autoAdjustBorders }}>{children}</ToggleGroupContext.Provider>\n    </RadixToggleGroup.Root>\n  );\n});\nToggleGroup.displayName = RadixToggleGroup.Root.displayName;\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadixToggleGroup.Item>,\n  React.ComponentPropsWithoutRef<typeof RadixToggleGroup.Item> & {\n    variants?: Partial<ToggleVariants>;\n  }\n>(({ children, className, variants = DEFAULT_VARIANTS, ...rest }, passedRef) => {\n  const { autoAdjustBorders } = React.useContext(ToggleGroupContext);\n\n  return (\n    <RadixToggleGroup.Item\n      {...rest}\n      className={cn(\n        toggleVariants(variants),\n        //Adjusts border radii of items to look good in a group\n        autoAdjustBorders &&\n          \"[&:not(:first-child)]:last:rounded-bl-none [&:not(:first-child)]:last:rounded-tl-none [&:not(:last-child)]:first:rounded-br-none [&:not(:last-child)]:first:rounded-tr-none [&:not(:last-child)]:[&:not(:first-child)]:rounded-none\",\n        className\n      )}\n      ref={passedRef}\n    >\n      {children}\n    </RadixToggleGroup.Item>\n  );\n});\nToggleGroupItem.displayName = RadixToggleGroup.Item.displayName;\n\nexport { ToggleGroup, ToggleGroupItem };\n"},{"fileName":"index.ts","fileContent":"import { ToggleGroup, ToggleGroupItem } from \"./ToggleGroup\";\n\nexport { ToggleGroup, ToggleGroupItem };\n"}]},"Tooltip":{"files":[{"fileName":"Tooltip.tsx","fileContent":"\"use client\";\n\nimport * as React from \"react\";\nimport * as RadixTooltip from \"@radix-ui/react-tooltip\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst TooltipProvider = RadixTooltip.Provider;\n\nconst Tooltip = RadixTooltip.Root;\n\nconst TooltipTrigger = RadixTooltip.Trigger;\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof RadixTooltip.Content>,\n  React.ComponentPropsWithoutRef<typeof RadixTooltip.Content>\n>(({ className, sideOffset = 6, ...rest }, passedRef) => (\n  <RadixTooltip.Content\n    {...rest}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 animate-zoomIn overflow-hidden rounded-md border bg-paper px-3 py-1.5 text-sm shadow-md data-[state=closed]:animate-zoomOut\",\n      className\n    )}\n    ref={passedRef}\n  />\n));\nTooltipContent.displayName = RadixTooltip.Content.displayName;\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n"},{"fileName":"index.ts","fileContent":"import { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider } from \"./Tooltip\";\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n"}]}}